The user, instead of writing their own shaders, will use pre generated materials.
These materials include:
SingleColorMaterial
MultiColorMaterial
Texture2DMaterial
Texture3DMaterial
CustomMaterial (aka the Material constructor)

Right now these materials use the basic lighting system.
Lighting will be implemented in Milestone 2

class SingleColorMaterial{
    constructor(params){
        this.lastCompiled = false;
        this.compiled = null;
        this.color = color;
        this.params = params;
    }
    build(render,mesh,scene,params){
        if(!this.lastCompiled){
            
            let vertexShaderSource = `
precision mediump float;
attribute vec3 vP;
attribute vec3 vN;
uniform mat4 wM;
uniform mat4 vM;
uniform mat4 pM;
uniform mat4 nM;
varying mediump vec3 fN;
void main(void){
    vec3 newVN = vec3(nM*vec4(vN,1.0));
    gl_Position = pM*vM*wM*vec4(vP,1.0);
    fN = newVN;
}
`
            let fragmentShaderSource = `
precision mediump float;
varying mediump vec3 fN;
uniform vec3 inverseLightDirection;
uniform vec4 objectColor;
void main(void){
    gl_FragColor = vec4(fN,1.0);
}
            `
            let vertexShader = new VertexShader(vertexShaderSource);
            let fragmentShader = new FragmentShader(fragmentShaderSource);
            let shaderProgram = new ShaderProgram(render,vertexShader,fragmentShader);
            this.lastCompiled = true;
            this.compiled = {
                shaderProgram:shaderProgram,
                parameters:[
                    {
                        type:UniformVector3,
                        attribute:"inverseLightDirection",
                        value:params[1]
                    },
                    {
                        type:UniformVector4,
                        attribute:"objectColor",
                        value:params[0]
                    }
                ]
            }
            return this.compiled;
        } else {
            return this.compiled;
        }
    }
}